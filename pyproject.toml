[tool.black]
line-length = 120

[tool.isort]
profile = "black"
line_length=120
skip_gitignore = true

[tool.flynt]
line-length = 120

[tool.mypy]
mypy_path = [
  "fastapi_filter",
]
show_error_codes = true
check_untyped_defs = true
plugins = [
  "sqlalchemy.ext.mypy.plugin",
]

[[tool.mypy.overrides]]
module = [
  "bson.objectid",
  "mongoengine.*",
  "uvicorn.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 120
# Assume Python 3.9 to be compatible with typing.
target-version = "py39"
# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    ".mypy_cache",
    ".nox",
    ".ruff_cache",
]


[tool.ruff.lint]
select = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "I",
  "SIM",
  "UP",
]
ignore = [
  "A003",  # Argument name should be lowercase.
  "B008",  # Do not perform function calls in argument defaults.
  "D1",  # Missing docstring https://www.pydocstyle.org/en/2.1.1/error_codes.html.
  "D203",  # 1 blank line required before class docstring.
  "D213",  # Multi-line docstring summary should start at the second line.
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.poetry]
name = "fastapi-filter"
version = "2.0.0"
description = "FastAPI filter"
authors = ["Arthur Rio <arthur.rio44@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/arthurio/fastapi-filter"
classifiers = [
    "Natural Language :: English",
    "Framework :: FastAPI",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
]

[tool.poetry.dependencies]
SQLAlchemy = {version = ">=1.4.36,<2.1.0", optional = true}
fastapi = ">=0.100.0,<1.0"
mongoengine = {version = ">=0.24.1,<0.28.0", optional = true}
pydantic = ">=2.0.0,<3.0.0"
python = ">=3.9,<4.0"

[tool.poetry.dev-dependencies]
Faker = "^22.7.0"
SQLAlchemy-Utils = "^0.41.0"
aiosqlite = "^0.19.0"
bandit = "^1.7.8"
flynt = "^1.0.1"
greenlet = "^3.0.3"
httpx = "^0.26.0"
ipython = "^8.11.0,<8.24.0"
mkdocs-material = "^9.5.21"
mypy = "^1.10.0"
mypy-extensions = "^1.0.0"
pre-commit = "^3.7.0"
pudb = "^2024.1"
pytest = "^7.4.4"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
pytest-pudb = "^0.7.0"
python-lsp-server = "^1.11.0"
requests = "^2.31.0"
tomli = "^2.0.1"
types-click = "^7.1.8"
types-setuptools = "^68.2.0.2"
typing-extensions = "^4.11.0"
uvicorn = "^0.29.0"
pydantic = {extras = ["email"], version="^2.7.1"}

[tool.poetry.extras]
mongoengine = ["mongoengine"]
sqlalchemy = ["SQLAlchemy"]
all = ["mongoengine", "SQLAlchemy"]

[tool.poetry.group.dev.dependencies]
nox = "^2023.0.0"
ruff = "^0.4.0"
urllib3 = "<=2.1.0"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]
